# Copy this file to you project's root directory (containing the project.json)
# then update the variables and paths trigger as a appropriate.
#
# The resouces section points to the repository containing the pipeline templates. This is set to UiPath's repository.
# DO NOT use the UiPath template repository for anything other than testing. It may change without notice.
# Please fork/replicate this repository to host it yourself and make any required modifications.

variables:

  # The full path to the folder containing the project.json file for this pipeline
  projectPath: project.json
  
  # The name of the folder to deploy the package to.
  folderName: Production
  
  # Either AutoVersion to generate a build number or CurrentVersion to match the project.json version.
  versioningStrategy: ManualVersion
  
  # Tenants
  devTenant: Main
  homTenant: Main
  prdTenant: Main
  
  # The environments to update the package version to the deployed version. 
  # Not required for modern folders or if you do not want to update the package version.
  environments: ''

# Update this trigger to specify when the pipeline should run.
# Variables cannot be used here.
trigger:
  # Define what branches trigger the pipeline
  branches:
    include:
      - main
      - dev
      - release
  # Define what paths to include for building this pipeline. Normally, you should add the same projectPath as above,
  # so that any change to the project will trigger the pipeline, but it will ignore any changes to other projects.
  paths:
    include:
      - '*' # same as '/' for the repository root

# This points to the repository containing the templates. Update this to point to your template repository. Using the Concept of DRY.
resources:
  repositories:
    - repository: templates
      type: github  # use 'git' for a repo hosted in Azure DevOps
      endpoint: EduardoSanglard
      name: EduardoSanglard/MyTestProcess 

# Staged pipeline with an approval process for production releases.
#
# Approvals are not defined here, but rather tied to the environment. 
#
# As is, this pipeline template will deploy to the DEV environment on commits to any developement* branch without approvals,
# will deploy to the UAT environment on commits to any release* branch without approvals,
# and will deploy to the Prod environment on commits to the master branch, after approval.

stages:
# Build the nuget package.
- stage: Build
  jobs:
  - job: BuildJob
    pool:  Default # Update this if using dedicated build pool
    workspace:
      clean: all
    steps:
    #- script: |
    #    $date = Get-Date -Format "yyyy.MM.dd.HHmmss"
    #    Write-Host "##vso[task.setvariable variable=packageVersion;]$date"
    #    displayName: 'Generate Version String'
    #- script: 'echo project path: $(projectPath), folder name: $(folderName), versioning strategy: $(versioningStrategy), environments: $(environments)'
    #  displayName: Log parameters
    - task: UiPathInstallPlatform@4 # This installs required exes. Not necessary if using a dedicated build machine.
    - task: UiPathPack@4
      inputs:
        versionType: 'ManualVersion'
        version: $(packageVersion)
        projectJsonPath: '$(Build.SourcesDirectory)\$(projectPath)'
        outputType: 'Process'
        orchestratorConnection: ADO-UiPath
        outputPath: '$(Build.ArtifactStagingDirectory)\Output'
        runWorkflowAnalysis: true
        traceLevel: 'Information'
    # Publish the nuget package for later stages.
    - publish: $(Build.ArtifactStagingDirectory)\Output
      artifact: drop

          
# Deploy to the Test environment on commits to any release* branch.
# Note that this stage has no environment defined, and won't have approvals.
# For Test environment approvals, update this to look like the Prod stage, but with using the Test environment.
- stage: DeployToTest
  condition: and(succeeded('Build'), startsWith(variables['Build.SourceBranchName'], 'main'))  # Only run if the packaging succeeded and we are on a development* branch.
  jobs:
  - job: DeployToTestJob
    pool: Default  # Update this if using dedicated build pool
    workspace:
      clean: all
    steps:
    - download: current
      artifact: drop
    - task: UiPathDeploy@4
      inputs:
        orchestratorConnection: ADO-UiPath
        packagesPath: '$(Pipeline.Workspace)\drop'
        folderName: $(folderName)
        environments: $(environments)

# Deploy to the Prod environment on commits to the master branch.
- stage: DeployToProd
  displayName: Deploy to Prod
  dependsOn: DeployToTest
  condition: and(succeeded('Build'), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - deployment: DeployToProdJob
    pool: Default
    workspace:
      clean: all
    environment: Production  # Update this to your Prod Enviornment in DevOps. This is where you configure the approval process.
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: UiPathDeploy@4
            inputs:
              orchestratorConnection: ADO-UiPath  # Update this to a service connection for your Prod Orchestrator.
              packagesPath: '$(Pipeline.Workspace)\drop'
              folderName: $(folderName)